{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","data","pageContext","location","tag","siteTitle","site","siteMetadata","title","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","frontmatter","key","to","pageQuery"],"mappings":"2FAAA,kGA8DeA,UAvDF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACzBC,EAAQF,EAARE,IACFC,EAAYJ,EAAKK,KAAKC,aAAaC,MAFO,EAGlBP,EAAKQ,kBAA3BC,EAHwC,EAGxCA,MAAOC,EAHiC,EAGjCA,WACTC,EAAS,MAASD,EAAT,KACE,IAAfA,EAAmB,GAAK,KADX,OAERP,EAFQ,SAIf,OACE,kBAAC,IAAD,CAASD,SAAUA,EAAUK,MAAOH,GAClC,4BAAKO,GACL,4BACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAP,EAAUM,EAAKG,YAAfT,MACR,OACE,wBAAIU,IAAKH,GACP,kBAAC,OAAD,CAAMI,GAAIJ,GAAOP,QASzB,kBAAC,OAAD,CAAMW,GAAG,SAAT,cA+BC,IAAMC,EAAS","file":"component---src-templates-tags-js-54ac28ba930c42898b0d.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport  Layout from '../components/layout'\n\nconst Tags = ({ data, pageContext, location }) => {\n  const { tag } = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagHeader = `找到 ${totalCount} ${\n    totalCount === 1 ? \"\" : \"s\"\n  } 篇 \"${tag}\" 相关文章`\n\n  return (\n    <Layout  location={location} title={siteTitle} >\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}