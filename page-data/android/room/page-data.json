{"componentChunkName":"component---src-templates-blog-post-js","path":"/android/room/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"孙某 Blog"}},"markdownRemark":{"id":"979b940b-b986-597d-b4c6-bb532f581fca","excerpt":"Room 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。 谷歌官方强烈建议您使用 Room（而不是 SQLite）具体可见：https://developer.android.google.cn/training/data…","html":"<p>Room 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。<br>\n<font color=red>谷歌官方强烈建议您使用 Room（而不是 SQLite）</font>具体可见：<a href=\"https://developer.android.google.cn/training/data-storage/room\">https://developer.android.google.cn/training/data-storage/room</a></p>\n<p>Room 包含 3 个主要组件：</p>\n<p>Database：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。<br>\nEntity：表示数据库中的表。<br>\nDAO：包含用于访问数据库的方法。  </p>\n<p>我们来看一下，三个组件的具体定义：\nDataBase：定义数据库名称，外部访问的单例方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Database(entities = {User.class}, version = 1)\npublic abstract class AppDataBase extends RoomDatabase {\n    public abstract UserDao userDao();\n    private static AppDataBase instance;\n\n    static AppDataBase getInstance(final Context context) {\n        if (instance == null) {\n            synchronized (AppDataBase.class) {\n                if (instance == null) {\n                    instance = Room.databaseBuilder(context.getApplicationContext(), AppDataBase.class, &quot;app&quot;)\n                            .addCallback(callback)\n                            .build();\n                }\n            }\n        }\n        return instance;\n    }\n}</code></pre></div>\n<p>Entity：定义数据库表的类型，包括其中的字段。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Entity\npublic class User {\n    @PrimaryKey(autoGenerate = true)\n    public int id;\n    private String firstName;\n    private String lastName;\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public User(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n}</code></pre></div>\n<p>DAO：定义访问数据库的方法，主要是完成SQL语句的注释。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Dao\npublic interface UserDao {\n    @Insert\n    public long insertUser(User user);\n\n    @Update\n    public int updateUser(User user);\n\n    @Delete\n    public int deleteUser(User user);\n\n    @Query(&quot;SELECT * FROM user&quot;)\n    public LiveData&lt;List&lt;User&gt;&gt; getAllUser();\n\n    @Query(&quot;DELETE FROM user&quot;)\n    public void deleteAllUser();\n}</code></pre></div>\n<p>使用方法见UserRepository：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class UserRepository {\n    private final UserDao userDao;\n    private LiveData&lt;List&lt;User&gt;&gt; users;\n\n    UserRepository(Application application) {\n        AppDataBase db = AppDataBase.getInstance(application);\n        userDao = db.userDao();\n        users = userDao.getAllUser();\n    }\n\n    LiveData&lt;List&lt;User&gt;&gt; getUsers() {\n        return users;\n    }\n\n    public void insert(User user) {\n        new insertAsyncTask(userDao).execute(user);\n    }\n\n    private static class insertAsyncTask extends AsyncTask&lt;User, Void, Void&gt; {\n        private UserDao asyncTaskUserDao;\n        insertAsyncTask(UserDao userDao) {\n            asyncTaskUserDao = userDao;\n        }\n\n\n        @Override\n        protected Void doInBackground(User... users) {\n            asyncTaskUserDao.insertUser(users[0]);\n            return null;\n        }\n    }\n}</code></pre></div>","frontmatter":{"title":"Android组件Room","tags":["android","room"],"date":"March 16, 2020","description":"android data binding "}}},"pageContext":{"slug":"/android/room/","previous":{"fields":{"slug":"/java/java8-predicate/"},"frontmatter":{"title":"java8 Predicate","tags":["java","predicate","java8"]}},"next":{"fields":{"slug":"/java/rxjava/"},"frontmatter":{"title":"RxJava, Retrofit, LiveData 简单例子","tags":["java","rxjava","retrofit","livedata"]}}}}}