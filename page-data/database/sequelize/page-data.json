{"componentChunkName":"component---src-templates-blog-post-js","path":"/database/sequelize/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"孙某 Blog"}},"markdownRemark":{"id":"a2be55d3-a07e-57a0-86d9-1adc8d104b0a","excerpt":"测试配置是否正确： 建立表，有两种方法： 调用 sequelize.define(modelName, attributes, options) 扩展 Model 并调用 init(attributes, options)   实例操作：\n创建实例：  保存数据：\n 创建并保存：  删除实例：  select…","html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">安装：\n    ```\n    npm install --save sequelize\n    \n    你还必须手动为所选数据库安装驱动程序：\n    选择以下之一:\n    npm install --save pg pg-hstore # Postgres\n    npm install --save mysql2\n    npm install --save mariadb\n    npm install --save sqlite3\n    npm install --save tedious # Microsoft SQL Server\n    ```</code></pre></div>\n<ol>\n<li>\n<p>测试配置是否正确：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">async function test(){\n    try {\n        const sequelize = new Sequelize(databaseName, userName, password, {\n            host: &#39;localhost&#39;,\n            dialect: &#39;mysql&#39;\n        });\n        await sequelize.authenticate();\n        console.log(&#39;Connection has been established successful.&#39;);\n    } catch(error) {\n        console.error(&#39;Unable to connect to database: &#39;, error);\n    }\n}\n\ntest();</code></pre></div>\n</li>\n<li>\n<p>建立表，有两种方法：<br>\n调用 sequelize.define(modelName, attributes, options)<br>\n扩展 Model 并调用 init(attributes, options)  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">使用 sequelize.define:\nconst { Sequelize, DataTypes } = require(&#39;sequelize&#39;);\nconst sequelize = new Sequelize(&#39;sqlite::memory:&#39;);\n\nconst User = sequelize.define(&#39;User&#39;, {\n// 在这里定义模型属性\nfirstName: {\n    type: DataTypes.STRING,\n    allowNull: false\n},\nlastName: {\n    type: DataTypes.STRING\n    // allowNull 默认为 true\n}\n}, {\n// 这是其他模型参数\n});\n\n// `sequelize.define` 会返回模型\nconsole.log(User === sequelize.models.User); // true\n------------------------------------------------------------------------\n扩展 Model\nconst { Sequelize, DataTypes, Model } = require(&#39;sequelize&#39;);\nconst sequelize = new Sequelize(&#39;sqlite::memory&#39;);\n\nclass User extends Model {}\n\nUser.init({\n// 在这里定义模型属性\nfirstName: {\n    type: DataTypes.STRING,\n    allowNull: false\n},\nlastName: {\n    type: DataTypes.STRING\n    // allowNull 默认为 true\n}\n}, {\n// 这是其他模型参数\nsequelize, // 我们需要传递连接实例\nmodelName: &#39;User&#39; // 我们需要选择模型名称\n});\n\n// 定义的模型是类本身\nconsole.log(User === sequelize.models.User); // true</code></pre></div>\n</li>\n<li>\n<p>实例操作：\n创建实例：<br>\n<code class=\"language-text\">const jane = User.build({ name: &quot;Jane&quot; });</code><br>\n保存数据：\n<code class=\"language-text\">await jane.save();</code><br>\n创建并保存：<br>\n<code class=\"language-text\">const jane = await User.create({ name: &quot;Jane&quot; });</code><br>\n删除实例：<br>\n<code class=\"language-text\">await jane.destroy();</code><br>\nselect查询：<br>\n查询全部<br>\n<code class=\"language-text\">const users = await User.findAll();</code><br>\n根据属性查询</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Model.findAll({\nattributes: [&#39;foo&#39;, &#39;bar&#39;]\n});</code></pre></div>\n<p>where查询：\n<code class=\"language-text\">Post.findAll({\n    where: {\n        authorId: 2\n    }\n    });</code>\n传递多个条件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Post.findAll({\n  where: {\n    authorId: 12\n    status: &#39;active&#39;\n  }\n});</code></pre></div>\n<p>带操作符：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const { Op } = require(&quot;sequelize&quot;);\nPost.findAll({\n  where: {\n    [Op.or]: [\n      { authorId: 12 },\n      { authorId: 13 }\n    ]\n  }\n});</code></pre></div>\n<p>通用操作符：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  [Op.eq]: 3,                              // = 3\n  [Op.ne]: 20,                             // != 20\n  [Op.is]: null,                           // IS NULL\n  [Op.not]: true,                          // IS NOT TRUE\n  [Op.or]: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n\n  // 使用方言特定的列标识符 (以下示例中使用 PG):\n  [Op.col]: &#39;user.organization_id&#39;,        // = &quot;user&quot;.&quot;organization_id&quot;\n\n  // 数字比较\n  [Op.gt]: 6,                              // &gt; 6\n  [Op.gte]: 6,                             // &gt;= 6\n  [Op.lt]: 10,                             // &lt; 10\n  [Op.lte]: 10,                            // &lt;= 10\n  [Op.between]: [6, 10],                   // BETWEEN 6 AND 10\n  [Op.notBetween]: [11, 15],               // NOT BETWEEN 11 AND 15\n\n  // 其它操作符\n\n  [Op.all]: sequelize.literal(&#39;SELECT 1&#39;), // &gt; ALL (SELECT 1)\n\n  [Op.in]: [1, 2],                         // IN [1, 2]\n  [Op.notIn]: [1, 2],                      // NOT IN [1, 2]\n\n  [Op.like]: &#39;%hat&#39;,                       // LIKE &#39;%hat&#39;\n  [Op.notLike]: &#39;%hat&#39;,                    // NOT LIKE &#39;%hat&#39;\n  [Op.startsWith]: &#39;hat&#39;,                  // LIKE &#39;hat%&#39;\n  [Op.endsWith]: &#39;hat&#39;,                    // LIKE &#39;%hat&#39;\n  [Op.substring]: &#39;hat&#39;,                   // LIKE &#39;%hat%&#39;</code></pre></div>\n<p>UPDATE数据：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">await User.update({ lastName: &quot;Doe&quot; }, {\n    where: {\n    lastName: null\n    }\n});</code></pre></div>\n<p>DELETE数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">await User.destroy({\n    where: {\n        firstName: &quot;Jane&quot;\n    }\n});</code></pre></div>\n<p>// 截断表格</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">await User.destroy({\n    truncate: true\n});  </code></pre></div>\n<p>排序和分组：<br>\nSequelize 提供了 order and group 参数,来与 ORDER BY 和 GROUP BY 一起使用.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Subtask.findAll({\n    order: [\n        // 将转义 title 并针对有效方向列表进行降序排列\n        [&#39;title&#39;, &#39;DESC&#39;],\n        // 将按最大年龄进行升序排序\n        sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;)),\n        // 将按最大年龄进行降序排序\n        [sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;)), &#39;DESC&#39;],\n        // 将按 otherfunction(`col1`, 12, &#39;lalala&#39;) 进行降序排序\n        [sequelize.fn(&#39;otherfunction&#39;, sequelize.col(&#39;col1&#39;), 12, &#39;lalala&#39;), &#39;DESC&#39;],\n        // 将使用模型名称作为关联名称按关联模型的 createdAt 排序.\n        [Task, &#39;createdAt&#39;, &#39;DESC&#39;],\n        // 将使用模型名称作为关联名称通过关联模型的 createdAt 排序.\n        [Task, Project, &#39;createdAt&#39;, &#39;DESC&#39;],\n        // 将使用关联名称按关联模型的 createdAt 排序.\n    [&#39;Task&#39;, &#39;createdAt&#39;, &#39;DESC&#39;],\n        // 将使用关联的名称按嵌套的关联模型的 createdAt 排序.\n        [&#39;Task&#39;, &#39;Project&#39;, &#39;createdAt&#39;, &#39;DESC&#39;],\n        // 将使用关联对象按关联模型的 createdAt 排序. (首选方法)\n        [Subtask.associations.Task, &#39;createdAt&#39;, &#39;DESC&#39;],\n        // 将使用关联对象按嵌套关联模型的 createdAt 排序. (首选方法)\n        [Subtask.associations.Task, Task.associations.Project, &#39;createdAt&#39;, &#39;DESC&#39;],\n        // 将使用简单的关联对象按关联模型的 createdAt 排序.\n        [{model: Task, as: &#39;Task&#39;}, &#39;createdAt&#39;, &#39;DESC&#39;],\n        // 将由嵌套关联模型的 createdAt 简单关联对象排序.\n        [{model: Task, as: &#39;Task&#39;}, {model: Project, as: &#39;Project&#39;}, &#39;createdAt&#39;, &#39;DESC&#39;]\n    ],\n    // 将按最大年龄降序排列\n    order: sequelize.literal(&#39;max(age) DESC&#39;),\n    // 如果忽略方向,则默认升序,将按最大年龄升序排序\n    order: sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;)),\n    // 如果省略方向,则默认升序, 将按年龄升序排列\n    order: sequelize.col(&#39;age&#39;),\n    // 将根据方言随机排序(但不是 fn(&#39;RAND&#39;) 或 fn(&#39;RANDOM&#39;))\n    order: sequelize.random()\n});\n\nFoo.findOne({  \n    order: [  \n        // 将返回 `name`  \n        [&#39;name&#39;],  \n        // 将返回 `username` DESC  \n        [&#39;username&#39;, &#39;DESC&#39;],  \n        // 将返回 max(`age`)  \n        sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;)),  \n        // 将返回 max(`age`) DESC  \n        [sequelize.fn(&#39;max&#39;, sequelize.col(&#39;age&#39;)), &#39;DESC&#39;],  \n        // 将返回 otherfunction(`col1`, 12, &#39;lalala&#39;) DESC  \n        [sequelize.fn(&#39;otherfunction&#39;, sequelize.col(&#39;col1&#39;), 12, &#39;lalala&#39;), &#39;DESC&#39;],  \n        // 将返回 otherfunction(awesomefunction(`col`)) DESC, 这种嵌套可能是无限的!  \n        [sequelize.fn(&#39;otherfunction&#39;, sequelize.fn(&#39;awesomefunction&#39;, sequelize.col(&#39;col&#39;))), &#39;DESC&#39;]  \n    ]\n});  </code></pre></div>\n<p>限制和分页：\n// 提取10个实例/行<br>\n<code class=\"language-text\">Project.findAll({ limit: 10 });</code><br>\n// 跳过8个实例/行<br>\n<code class=\"language-text\">Project.findAll({ offset: 8 });</code><br>\n// 跳过5个实例,然后获取5个实例<br>\n<code class=\"language-text\">Project.findAll({ offset: 5, limit: 5 });</code>  </p>\n</li>\n</ol>","frontmatter":{"title":"sequelize简单使用","tags":["database","mysql","sequelize"],"date":"April 06, 2020","description":"sequelize简单使用"}}},"pageContext":{"slug":"/database/sequelize/","previous":{"fields":{"slug":"/database/mysql-ubuntu/"},"frontmatter":{"title":"ubuntu mysql安装及简单使用","tags":["database","mysql"]}},"next":null}}}