{"componentChunkName":"component---src-templates-blog-post-js","path":"/electron/electron-react/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"孙某 Blog"}},"markdownRemark":{"id":"5f98c6a7-71c7-57c5-8bab-eea93db71485","excerpt":"版本React 16.12，electron 8.0   先搭建react环境, 用官方的create-react-app工具      —正常启动   浏览器访问http://localhost:3000， 出现react logo搭建成功   搭建 electron…","html":"<p>版本React 16.12，electron 8.0  </p>\n<ol>\n<li>先搭建react环境, 用官方的create-react-app工具  </li>\n</ol>\n<p><code class=\"language-text\">npx create-react-app my-app</code><br>\n<code class=\"language-text\">cd my-app</code><br>\n<code class=\"language-text\">npm start</code> —正常启动  </p>\n<p>浏览器访问<a href=\"http://localhost:3000\">http://localhost:3000</a>， 出现react logo搭建成功  </p>\n<ol start=\"2\">\n<li>搭建 electron环境  </li>\n</ol>\n<p><code class=\"language-text\">yarn add electron electron-builder --dev 用electron-builder打包程序</code>  </p>\n<ol start=\"3\">\n<li>加入第三方工具  </li>\n</ol>\n<p> <code class=\"language-text\">yarn add wait-on concurrently --dev</code>\n其中wait-on是等待react 是否启动完成使用，Concurrently 是同时启动react 和 electron使用。（开发的时候，react和electron要分别启动）  </p>\n<ol start=\"4\">\n<li>在build目录下，建立electron.js文件。（electron-builder打包时规定的目录）  </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const { app, BrowserWindow } = require(&#39;electron&#39;)\nconst path = require(&#39;path&#39;);\nconst url = require(&#39;url&#39;)\nconst pkg = require(&#39;../package.json&#39;)\n\nfunction createWindow () {\n  // Create the browser window.\n  let win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: true\n    }\n  })\n\n  // and load the index.html of the app.\n  if (pkg.devMode) \n    win.loadURL(&#39;http://localhost:3000/&#39;);\n  else \n    win.loadURL(url.format({\n      pathname: path.join(__dirname, &#39;./index.html&#39;),\n      protocol: &#39;file&#39;,\n      slashes: true\n    }));\n\n    console.log(&#39;app started.&#39;);\n}\n\napp.whenReady().then(createWindow)\n\n5. package相关配置：  \n\n{\n  &quot;name&quot;: &quot;my-app&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;private&quot;: true,\n  &quot;main&quot;: &quot;build/electron.js&quot;,\n  &quot;build&quot;: {\n    &quot;appId&quot;: &quot;cantools&quot;,\n    &quot;files&quot;: [\n      &quot;build/**/*&quot;,\n      &quot;node_modules/**/*&quot;\n    ],\n    &quot;win&quot;: {\n      &quot;target&quot;: [\n        &quot;nsis&quot;,\n        &quot;zip&quot;\n      ]\n    }\n  },\n  &quot;dependencies&quot;: {\n    &quot;@testing-library/jest-dom&quot;: &quot;^4.2.4&quot;,\n    &quot;@testing-library/react&quot;: &quot;^9.3.2&quot;,\n    &quot;@testing-library/user-event&quot;: &quot;^7.1.2&quot;,\n    &quot;bootstrap&quot;: &quot;^4.4.1&quot;,\n    &quot;jquery&quot;: &quot;^3.4.1&quot;,\n    &quot;path&quot;: &quot;^0.12.7&quot;,\n    &quot;popper.js&quot;: &quot;^1.16.1&quot;,\n    &quot;react&quot;: &quot;^16.12.0&quot;,\n    &quot;react-bootstrap&quot;: &quot;^1.0.0-beta.16&quot;,\n    &quot;react-dom&quot;: &quot;^16.12.0&quot;,\n    &quot;react-scripts&quot;: &quot;3.3.1&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;concurrently&quot;: &quot;^5.1.0&quot;,\n    &quot;electron&quot;: &quot;^8.0.0&quot;,\n    &quot;electron-builder&quot;: &quot;^22.3.2&quot;,\n    &quot;wait-on&quot;: &quot;^4.0.0&quot;\n  },\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;react-scripts start&quot;,\n    &quot;build&quot;: &quot;react-scripts build&quot;,\n    &quot;test&quot;: &quot;react-scripts test&quot;,\n    &quot;eject&quot;: &quot;react-scripts eject&quot;,\n    &quot;electron-start&quot;: &quot;electron .&quot;,\n    &quot;electron-dev&quot;: &quot;concurrently \\&quot;set BROWSER=none\\&quot; \\&quot;yarn start\\&quot; \\&quot;wait-on http://localhost:3000 &amp;&amp; electron .\\&quot;&quot;,\n    &quot;dist&quot;: &quot;electron-builder --win --x64&quot;\n  },\n  &quot;eslintConfig&quot;: {\n    &quot;extends&quot;: &quot;react-app&quot;\n  },\n  &quot;browserslist&quot;: {\n    &quot;production&quot;: [\n      &quot;&gt;0.2%&quot;,\n      &quot;not dead&quot;,\n      &quot;not op_mini all&quot;\n    ],\n    &quot;development&quot;: [\n      &quot;last 1 chrome version&quot;,\n      &quot;last 1 firefox version&quot;,\n      &quot;last 1 safari version&quot;\n    ]\n  },\n  &quot;homepage&quot;: &quot;.&quot;,\n  &quot;devMode&quot;: true\n}</code></pre></div>\n<ol start=\"6\">\n<li>bootstrap使用<br>\nreact要结合bootstrap使用<br>\n<code class=\"language-text\">yarn add react-bootstrap bootstrap jquery</code><br>\n在src/index.js里加入css,<br>\n<code class=\"language-text\">import &#39;bootstrap/dist/css/bootstrap.min.css&#39;;</code></li>\n<li>打包\n先打包react:<br>\n<code class=\"language-text\">npm run build</code><br>\n在build目录下生成react production文件<br>\n用electron-builder打包整体文件<br>\n<code class=\"language-text\">npm run dist</code><br>\n生成dist目录里，就有生成相关exe和安装包</li>\n</ol>","frontmatter":{"title":"搭建electron react环境","tags":["react","electron"],"date":"February 20, 2020","description":"用electron react配合搭建环境开发PC程序，提高开发效率"}}},"pageContext":{"slug":"/electron/electron-react/","previous":{"fields":{"slug":"/ngnix-config/nginx-config/"},"frontmatter":{"title":"Nginx配置与命令","tags":["nginx","linux","server"]}},"next":{"fields":{"slug":"/nodejs/nodejs-native/"},"frontmatter":{"title":"nodejs与cpp相互调用","tags":["nodejs","native","cpp","n-api"]}}}}}