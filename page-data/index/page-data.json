{"componentChunkName":"component---src-templates-blog-list-js","path":"/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"孙某 Blog"}},"allMarkdownRemark":{"edges":[{"node":{"id":"db38db56-93b9-5f22-a915-5d9f40ac48ce","excerpt":"Blog之前一直在自己的服务器。一年几百块钱，也是不小的数目。 所以就把Blog搬到了Github的pages上，方法也比较简单。 安装gh-pages工具，在Blog的根目录下执行：  增加部署命令：    部署到Github上：  域名设置： 在阿里云无名那里建立CNAME…","fields":{"slug":"/myblog/deploy-blog/"},"frontmatter":{"date":"30 March, 2020","title":"将Blog布置到Github上"}}},{"node":{"id":"eaa5c0e5-e44e-5af7-a8d1-bdc5e00decc5","excerpt":"资料基本上来自于Google的Material Design网站，https://material.io/\n谷歌对设计原则，组件，Icons，辅助设计，开发都做了相关的建议。 设计 Layout: 可预测，可感知，前后设计一致。响应式。  https://material.io…","fields":{"slug":"/design/material-design/"},"frontmatter":{"date":"25 March, 2020","title":"Material Design概述"}}},{"node":{"id":"2f4c49a1-1706-58dc-a502-02b364bf8c96","excerpt":"依赖注入是设计模式基础原则之一，原则是上层模块不依赖于下层模块，而是依赖于一套抽象接口，上层模块调用接口，下层模块实现接口。 举一个google官网上的例子。 \n汽车都有一个发动机，我们有…","fields":{"slug":"/java/dagger2/"},"frontmatter":{"date":"21 March, 2020","title":"dagger2的使用"}}},{"node":{"id":"856368ca-e342-552e-8836-e02f047e013f","excerpt":"例子比较简单，就是从通过Github的Api取用户相关的信息。显示在主界面上。\n代码地址：https://github.com/spmno/retrofit-test 先给出环境：在app的gradle加下面库，更新为最新版本。 布局比较简单，就用了一个EditText…","fields":{"slug":"/java/rxjava/"},"frontmatter":{"date":"18 March, 2020","title":"RxJava, Retrofit, LiveData 简单例子"}}},{"node":{"id":"979b940b-b986-597d-b4c6-bb532f581fca","excerpt":"Room 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。 谷歌官方强烈建议您使用 Room（而不是 SQLite）具体可见：https://developer.android.google…","fields":{"slug":"/android/room/"},"frontmatter":{"date":"16 March, 2020","title":"Android组件Room"}}}]}},"pageContext":{"limit":5,"skip":0,"numPages":7,"currentPage":1}}}