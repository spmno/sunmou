{"componentChunkName":"component---src-templates-blog-post-js","path":"/myblog/gatsby-blog/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"孙某 Blog"}},"markdownRemark":{"id":"7ec42d7c-24d2-5523-bb55-7e7055c35a42","excerpt":"本文不是从零开始建立，是根据官方提供的Blog模板建立 根据模板建立基础工程：  根据自己的信息，修改文件。 title: 博客标题，显示在首页的最上面。 author, description: 作者及博客相关描述。 siteUrl: 博客地址。 social: 原来是作者的twitter，可以改成我们的微信ID…","html":"<p>本文不是从零开始建立，是根据官方提供的Blog模板建立</p>\n<ol>\n<li>根据模板建立基础工程：</li>\n</ol>\n<p><code class=\"language-text\">gatsby new my-blog https://github.com/gatsbyjs/gatsby-starter-blog-theme</code></p>\n<p>根据自己的信息，修改<code class=\"language-text\">gatsby-config</code>文件。</p>\n<p>title: 博客标题，显示在首页的最上面。<br>\nauthor, description: 作者及博客相关描述。<br>\nsiteUrl: 博客地址。<br>\nsocial: 原来是作者的twitter，可以改成我们的微信ID。  </p>\n<p>增加<a href=\"tongji.baidu.com\">百度统计</a>：\n<code class=\"language-text\">yarn add gatsby-plugin-baidu-tongji</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  resolve: &#39;gatsby-plugin-baidu-tongji&#39;,\n  options: {\n    siteid: 在百度申请的ID // 在百度统计获取代码变量hm.src 后面的32位的ID\n    head: false\n  }</code></pre></div>\n<p>加到文件的plugins的子项里面。</p>\n<p>基本配置后，<code class=\"language-text\">gatsby develop</code> 就可以在 <a href=\"http://localhost:8000\">http://localhost:8000</a>  看到博客的基本效果了。\n在content的blog目录下，写markdown文件，就可以显示到自己的博客里了。</p>\n<ol start=\"2\">\n<li>分页</li>\n</ol>\n<p>完成了第1部分，基本上一个最简单的博客就完成了。但是写的多了，没有分页，体验不好。接下来介绍一下如何加分页功能。</p>\n<p>在原来的模板中，index.js 负责主页的显示。如果分页的话，应该需要自己写代码建立主页了。</p>\n<p>从<a href=\"https://www.gatsbyjs.org/docs/creating-and-modifying-pages/\">gastby的文档</a>里可以知道，建立页面的方法一共3种：</p>\n<ul>\n<li>在pages的目录下建立React Component。</li>\n<li>在gatsby-node.js文件中，实现createPages函数中，用createPage函数。</li>\n<li>在插件中实现createPages方法。</li>\n</ul>\n<p>之前我们用的是第一种方面，接下来我们需要用第二种方法。<br>\n我们先删除pages/index.js，这个已经没有用了。\n在templates/目录下，建立分页式主页的模板，./templates/blog-list.js，内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;\nimport { Link, graphql } from &#39;gatsby&#39;\n\nimport SEO from &#39;../components/seo&#39;\nimport Bio from &#39;../components/bio&#39;\nimport Layout from &#39;../components/layout&#39;\nimport { rhythm } from &#39;../utils/typography&#39;\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? &#39;/&#39; : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n\n    return (\n      &lt;Layout location={this.props.location} title={siteTitle}&gt;\n        &lt;SEO\n          title={siteTitle}\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        /&gt;\n        &lt;Bio /&gt;\n        {posts.map(({ node }) =&gt; {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            &lt;div key={node.fields.slug}&gt;\n              &lt;h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              &gt;\n                &lt;Link style={{ boxShadow: &#39;none&#39; }} to={node.fields.slug}&gt;\n                  {title}\n                &lt;/Link&gt;\n              &lt;/h3&gt;\n              &lt;small&gt;{node.frontmatter.date}&lt;/small&gt;\n              &lt;p dangerouslySetInnerHTML={{ __html: node.excerpt }} /&gt;\n            &lt;/div&gt;\n          )\n        })}\n        &lt;ul\n          style={{\n            display: &#39;flex&#39;,\n            flexWrap: &#39;wrap&#39;,\n            justifyContent: &#39;space-between&#39;,\n            alignItems: &#39;center&#39;,\n            listStyle: &#39;none&#39;,\n            padding: 0,\n          }}\n        &gt;\n          {!isFirst &amp;&amp; (\n            &lt;Link to={prevPage} rel=&quot;prev&quot;&gt;\n              ← Previous Page\n            &lt;/Link&gt;\n          )}\n          {Array.from({ length: numPages }, (_, i) =&gt; (\n            &lt;li\n              key={`pagination-number${i + 1}`}\n              style={{\n                margin: 0,\n              }}\n            &gt;\n              &lt;Link\n                to={`/${i === 0 ? &#39;&#39; : i + 1}`}\n                style={{\n                  padding: rhythm(1 / 4),\n                  textDecoration: &#39;none&#39;,\n                  color: i + 1 === currentPage ? &#39;#ffffff&#39; : &#39;&#39;,\n                  background: i + 1 === currentPage ? &#39;#007acc&#39; : &#39;&#39;,\n                }}\n              &gt;\n                {i + 1}\n              &lt;/Link&gt;\n            &lt;/li&gt;\n          ))}\n          {!isLast &amp;&amp; (\n            &lt;Link to={nextPage} rel=&quot;next&quot;&gt;\n              Next Page →\n            &lt;/Link&gt;\n          )}\n        &lt;/ul&gt;\n      &lt;/Layout&gt;\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: &quot;DD MMMM, YYYY&quot;)\n            title\n          }\n        }\n      }\n    }\n  }\n`</code></pre></div>\n<p>在<code class=\"language-text\">gatsby-node.js</code>文件中的<code class=\"language-text\">createPages</code>下面，创建完每个子页的后面，加入创建分页代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  // Create blog post list pages\n    const postsPerPage = 5;\n    const numPages = Math.ceil(posts.length / postsPerPage);\n\n    Array.from({ length: numPages }).forEach((_, i) =&gt; {\n      createPage({\n        path: i === 0 ? `/` : `/${i + 1}`,\n        component: path.resolve(&#39;./src/templates/blog-list.js&#39;),\n        context: {\n          limit: postsPerPage,\n          skip: i * postsPerPage,\n          numPages,\n          currentPage: i + 1\n        },\n      });\n    });</code></pre></div>\n<p>  上面的代码根据每页要显示的数量去计算需要创建的页面。<br>\n到目前为止，一个有分页功能博客就建立完成。</p>\n<p>参考链接：</p>\n<p>通过模板建立最简单博客：<a href=\"https://www.gatsbyjs.org/tutorial/using-a-theme/\">https://www.gatsbyjs.org/tutorial/using-a-theme/</a><br>\n建立分页：<a href=\"https://www.gatsbyjs.org/docs/adding-pagination/\">https://www.gatsbyjs.org/docs/adding-pagination/</a></p>","frontmatter":{"title":"用gatsby建立自己的博客","tags":["gatsby","blog"],"date":"February 23, 2020","description":"根据gatsby官网指导来建立自己的博客"}}},"pageContext":{"slug":"/myblog/gatsby-blog/","previous":{"fields":{"slug":"/nodejs/nodejs-native/"},"frontmatter":{"title":"nodejs与cpp相互调用","tags":["nodejs","native","cpp","n-api"]}},"next":{"fields":{"slug":"/javascript/javascript-enum/"},"frontmatter":{"title":"javascrip中的枚举类型","tags":["javascript","enum"]}}}}}