{"componentChunkName":"component---src-templates-blog-post-js","path":"/nodejs/nodejs-native/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"孙某 Blog"}},"markdownRemark":{"id":"9ddf73f4-5566-5fc4-a64b-020b82f21f3f","excerpt":"Nodejs 与 native交互有3种方式：N-API，nan，直接使用V8，libuv及nodejs库。 N-API是nodejs 8.0以上新发布的稳定的，主要解决版本兼容性。 N-API 是C语言，版本C++版本是 https://github.com/nodejs/node-addon-api   N-API…","html":"<p>Nodejs 与 native交互有3种方式：N-API，nan，直接使用V8，libuv及nodejs库。<br>\nN-API是nodejs 8.0以上新发布的稳定的，主要解决版本兼容性。<br>\nN-API 是C语言，版本C++版本是 <a href=\"https://github.com/nodejs/node-addon-api\">https://github.com/nodejs/node-addon-api</a>  </p>\n<ol>\n<li>N-API使用方法：<br>\n<code class=\"language-text\">npm install node-gyp --save-dev</code><br>\n<code class=\"language-text\">npm install -g --production windows-build-tools(windows下的编译环境）</code></li>\n</ol>\n<p>根目录下建立工程文件binding.gyp  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    {  \n        &quot;targets&quot;: [  \n        {  \n          &quot;target_name&quot;: &quot;hello&quot;,  \n          &quot;sources&quot;: [ &quot;hello.cc&quot; ] \n        }  \n      ]  \n    }  </code></pre></div>\n<p>建立hello.cc  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #include &lt;node_api.h&gt;  \n    #include &lt;assert.h&gt;  \n\n    napi_value Method(napi_env env, napi_callback_info info) {\n      napi_status status;\n      napi_value world;\n      status = napi_create_string_utf8(env, &quot;world&quot;, 5, &amp;world);\n      assert(status == napi_ok);\n      return world;\n    }\n\n    #define DECLARE_NAPI_METHOD(name, func)                          \\\n      { name, 0, func, 0, 0, 0, napi_default, 0 }\n\n    napi_value Init(napi_env env, napi_value exports) {\n      napi_status status;\n      napi_property_descriptor desc = DECLARE_NAPI_METHOD(&quot;hello&quot;, Method);\n      status = napi_define_properties(env, exports, 1, &amp;desc);\n      assert(status == napi_ok);\n      return exports;\n    }\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, Init)</code></pre></div>\n<p>编译文件 node-gyp rebuild，生成文件在build/Release目录下。<br>\n建立hello.js并且调用  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var addon = require(&#39;bindings&#39;)(&#39;hello&#39;);  \nconsole.log(addon.hello()); // &#39;world&#39;</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>C++调用方法:  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install node-gyp --save-dev\nnpm install -g --production windows-build-tools(windows下的编译环境）\nnpm install node-addon-api --save</code></pre></div>\n<p>建立工程文件binding.gyp  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;hello&quot;,\n      &quot;cflags!&quot;: [ &quot;-fno-exceptions&quot; ],\n      &quot;cflags_cc!&quot;: [ &quot;-fno-exceptions&quot; ],\n      &quot;sources&quot;: [ &quot;hello.cc&quot; ],\n      &quot;include_dirs&quot;: [\n        &quot;&lt;!@(node -p \\&quot;require(&#39;node-addon-api&#39;).include\\&quot;)&quot;\n      ],\n      &#39;defines&#39;: [ &#39;NAPI_DISABLE_CPP_EXCEPTIONS&#39; ],\n    }\n  ]\n}</code></pre></div>\n<p>建立hello.cc</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include &lt;napi.h&gt;\n\nNapi::String Method(const Napi::CallbackInfo&amp; info) {\n  Napi::Env env = info.Env();\n  return Napi::String::New(env, &quot;world&quot;);\n}\n\nNapi::Object Init(Napi::Env env, Napi::Object exports) {\n  exports.Set(Napi::String::New(env, &quot;hello&quot;),\n              Napi::Function::New(env, Method));\n  return exports;\n}</code></pre></div>\n</li>\n</ol>\n<p>NODE<em>API</em>MODULE(hello, Init)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">编译node-gyp rebuild\n建立hello.js并且运行</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var addon = require(&#39;bindings&#39;)(&#39;hello&#39;);\nconsole.log(addon.hello()); // &#39;world&#39;</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3. C++ 多函数导出用法：\nNapi::Object functionexample::Init(Napi::Env env, Napi::Object exports) {\n    exports.Set(&quot;hello&quot;, Napi::Function::New(env, functionexample::HelloWrapped));\n    exports.Set(&quot;add&quot;, Napi::Function::New(env, functionexample::AddWrapped));\n    return exports;\n}\n\nNapi::Object InitAll(Napi::Env env, Napi::Object exports) {\n  return functionexample::Init(env,exports);\n}\n\n4. c++ callback使用方法：\nvoid RunCallback(const Napi::CallbackInfo&amp; info) {\n  Napi::Env env = info.Env();\n  Napi::Function cb = info[0].As&lt;Napi::Function&gt;();\n  cb.Call(env.Global(), { Napi::String::New(env, &quot;hello world&quot;) });\n}</code></pre></div>","frontmatter":{"title":"nodejs与cpp相互调用","tags":["nodejs","native","cpp","n-api"],"date":"February 21, 2020","description":"通过CPP实现nodejs与native层互相调用"}}},"pageContext":{"slug":"/nodejs/nodejs-native/","previous":{"fields":{"slug":"/electron/electron-react/"},"frontmatter":{"title":"搭建electron react环境","tags":["react","electron"]}},"next":{"fields":{"slug":"/myblog/gatsby-blog/"},"frontmatter":{"title":"用gatsby建立自己的博客","tags":["gatsby","blog"]}}}}}