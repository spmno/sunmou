{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/hook/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"孙某 Blog"}},"markdownRemark":{"id":"006c3f61-cb08-55ae-9a66-2db28e99f8c8","excerpt":"最简单概括hook的一句话就是，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 React官网给出的3个使用的理由： 完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。 100% 向后兼容的。 Hook…","html":"<p>最简单概括hook的一句话就是，它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>React官网给出的3个使用的理由：</p>\n<ul>\n<li>完全可选的。 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。</li>\n<li>100% 向后兼容的。 Hook 不包含任何破坏性改动。</li>\n<li>现在可用。 Hook 已发布于 v16.8.0。</li>\n</ul>\n<p>最常用的两个Hook就是useState和useEffect，我们通过这两个例子还了解Hook吧。</p>\n<ol>\n<li>\n<p>useState\n代替class中的state，参数只有一个就是state的初始值，返回state变量和setState函数。\n我们来对比一个两个版本的区别：<br>\nclass版本：  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Example extends React.Component {\nconstructor(props) {\n    super(props);\n    this.state = {\n    count: 0\n    };\n}\n\nrender() {\n    return (\n    &lt;div&gt;\n        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;\n        Click me\n        &lt;/button&gt;\n    &lt;/div&gt;\n    );\n}\n}</code></pre></div>\n<p>hook版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from &#39;react&#39;;\n\nfunction Example() {\n// 声明一个叫 &quot;count&quot; 的 state 变量\nconst [count, setCount] = useState(0);\n\nreturn (\n    &lt;div&gt;\n    &lt;p&gt;You clicked {count} times&lt;/p&gt;\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n    &lt;/button&gt;\n    &lt;/div&gt;\n);\n}</code></pre></div>\n<p>是不是感觉hook的版本更轻爽一些。  </p>\n</li>\n<li>\n<p>useEffect\nuseEffect Hook 可以看做 componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个函数的组合。<br>\n看一下对比的例子：<br>\nclass版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Example extends React.Component {\nconstructor(props) {\n    super(props);\n    this.state = {\n    count: 0\n    };\n}\n\ncomponentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n}\n\ncomponentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n}\n\nrender() {\n    return (\n    &lt;div&gt;\n        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;\n        Click me\n        &lt;/button&gt;\n    &lt;/div&gt;\n    );\n  }\n}</code></pre></div>\n<p>hook版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState, useEffect } from &#39;react&#39;;\n\nfunction Example() {\nconst [count, setCount] = useState(0);\n\n// Similar to componentDidMount and componentDidUpdate:\nuseEffect(() =&gt; {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n});\n\nreturn (\n    &lt;div&gt;\n    &lt;p&gt;You clicked {count} times&lt;/p&gt;\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n    &lt;/button&gt;\n    &lt;/div&gt;\n);\n}</code></pre></div>\n<p>可以看到hook版本的一个函数包括了componentDidMount, componentDidUpdate两个函数的作用。如果Effect返回函数，则这个函数就是componentWillUnmount函数的作用，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> useEffect(() =&gt; {\n    return function umount() {\n    console.log(&#39;this is the umount function&#39;);\n    };\n});</code></pre></div>\n<p>THE END</p>\n</li>\n</ol>","frontmatter":{"title":"react hook特性","tags":["react","hook"],"date":"March 10, 2020","description":"使用hook来写自己组件 "}}},"pageContext":{"slug":"/react/hook/","previous":{"fields":{"slug":"/android/view-binding/"},"frontmatter":{"title":"android view binding","tags":["android","view-binding"]}},"next":{"fields":{"slug":"/android/data-binding/"},"frontmatter":{"title":"android data binding","tags":["android","data-binding"]}}}}}